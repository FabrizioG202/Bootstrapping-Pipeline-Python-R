import snakemake
import glob

input_folder = "../results/pvalues/"
output_folder = "../results/qvalues/"
input_files = "../results/pvalues/{cell_line}.{feature_name}.tsv"

wcards = glob_wildcards(input_files)

TASKS = list(zip(wcards.cell_line, wcards.feature_name))


def yellow(text):
    return "\033[1;33m{}\033[0m".format(text)

def green(text):
    return "\033[1;32m{}\033[0m".format(text)

def italic(text):
    return "\033[3m{}\033[0m".format(text)

print("Found a total of {} tasks.".format(len(TASKS)))

rule run_dagger:
    input:
        pvalues_files = [input_folder + f"{cell_line}.{feature_name}.tsv" for cell_line, feature_name in TASKS],
        cluster_files = [f"../data/clusters/{cell_line}" for cell_line, feature_name in TASKS]
    output:
        [output_folder + f"{cell_line}.{feature_name}.tsv" for cell_line, feature_name in TASKS]
    
    run:
        for i, (cell_line, feature_name) in enumerate(TASKS):
            pvalue_file = input_folder + f"{cell_line}.{feature_name}.tsv"
            print(f"Running DAGGER on pvalues: {pvalue_file} (cell line: {cell_line}, feature: {feature_name}) ({italic(str(i+1))}/{len(TASKS)})")
            cluster_file = f"../data/clusters/{cell_line}/"
            output_file = output_folder + f"{cell_line}.{feature_name}.tsv"
            feature_folder = f"../data/features/{cell_line}/{feature_name}/"
            #The feature file is the first file in the folder and if no files are found, throw an error
            feature_file = glob.glob(feature_folder + "*")[0]

            #Run the DAGGER algorithm
            ### The commandline interface is the following:
            ### Rscript dagger.R <pvalues_table> <features_bed> <cluster_file> <out_file>
            cmd = f"Rscript dagger.R {pvalue_file} {feature_file} {cluster_file} {output_file}"
            shell(cmd)