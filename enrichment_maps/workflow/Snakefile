import os
import glob
from pprint import pprint

# Adding the configuration file.
configfile: "./workflow/config.yaml"


# General useful functions, color, italic etc,
def red(text):
    return "\033[1;31m" + str(text) + "\033[0m"

def green(text):
    return "\033[1;32m" + str(text) + "\033[0m"

def yellow(text):
    return "\033[1;33m" + str(text) + "\033[0m"


RESOLUTION = config["resolution"]
CHROMOSOMES = ["chr" + str(i) for i in range(1, 23)]
BOOTSTRAPS = config["bootstraps"]

CELL_LINE = config["cell_line"]
FEATURE_TYPE = config["feature_type"]

# the output folder
OUTPUT_FOLDER = config["output_folder"]

# IF the resolution is not a list make it into a list of just 1 element:
if not isinstance(RESOLUTION,list):
    RESOLUTION = [RESOLUTION]

#a list of tuple: (feature_type, filepath)
feature = []

def get_first_file_in_dir(dirpath):
    for file in os.listdir(dirpath):
        if file.endswith(".bed"):
            return os.path.join(dirpath, file)

    raise Exception("No bed file found in directory: " + dirpath)

# if the FEATURE type is a single string add it to a list
if isinstance(FEATURE_TYPE, str):
    if FEATURE_TYPE == "all":
        # get all the subfolder 
        # the features folder is expected in this format:
        # features/cell_line/feature_type/file.bed
        features = [(os.path.basename(x), get_first_file_in_dir(x)) for x in glob.glob("../data/features/" + CELL_LINE + "/*")]
    else:
        features = [(FEATURE_TYPE, get_first_file_in_dir("../data/features/" + CELL_LINE + "/" + FEATURE_TYPE))]
else:
    features = [(x, get_first_file_in_dir("../data/features/" + CELL_LINE + "/" + x)) for x in FEATURE_TYPE]

def format_resolution(resolution : int):
    suffixes = ["", "k", "m", "g"]
    for suffix in suffixes:
        if resolution < 1000:
            return str(int(resolution)) + suffix + "b"
        resolution /= 1000


def green(text : str):
    return "\033[92m" + text + "\033[0m"


def get_counts_filename_from_features(features : list):
    return [os.path.join(os.path.dirname(x[1]), os.path.basename(x[1])[:-4] + ".counts.tsv") for x in features]

def yellow(text : str):
    return "\033[93m" + text + "\033[0m"

def red(text : str):
    return "\033[91m" + text + "\033[0m"

def italic(text : str):
    return "\033[3m" + text + "\033[0m"

counts_files = get_counts_filename_from_features(features)

#Print each feature in format yellow(feature_type) + ": " + italic(feature_file)
print("Annotating and computing values for the following features:")
for feature_type, feature_file in features:
    print(yellow(feature_type) + ": " + italic(feature_file))


rule compute_enrichment_maps:
    input:
        script = "./src/main.py",
        feature_file = [x[1] for x in features],
        counts_file = counts_files,
        genome_file = "../data/hg19.genome",
    
    params:
        resolution = RESOLUTION,
        regions_path = "../data/annotations/",
        bootstraps = BOOTSTRAPS
    benchmark:
        "../benchmarks/enrichment.tsv"
    run:
        # make the directory if it does not already exist.
        if not os.path.exists("../results/fine_enrichment"):
            os.makedirs("../results/fine_enrichment")
            
        for i in range(len(input.feature_file)):
            input_file = input.feature_file[i]
            feature_type = features[i][0]
            base_folder = OUTPUT_FOLDER + CELL_LINE + "/" + feature_type + "/" 
            counts_file = input.counts_file[i]
            for chromo in CHROMOSOMES:
                for resolution in RESOLUTION:
                    resolution_str = format_resolution(resolution)
                    output_file = base_folder + "/" + resolution_str + "/" + chromo

                    # create the parent folder if it does not exist
                    if not os.path.exists(os.path.dirname(output_file)):
                        os.makedirs(os.path.dirname(output_file))

                    # (usage: "Usage: python main.py <chromo> <resolution> <features_path> <counts_path> <genome_path> <regions_path> <N> <out_path>")
                    cmd = ("python {input.script}" + f" {chromo} " + resolution_str + f" {input_file} {counts_file}" " {input.genome_file} {params.regions_path} {params.bootstraps}" + f" {output_file}")
                    shell(cmd)

rule annotate_features:
    input: 
        script = "src/annotate.R",
        feature_files = [x[1] for x in features],
    output:
        counts_files = counts_files,
    
    run:
        for i in range(len(input.feature_files)):
            input_file = input.feature_files[i]
            output_file = output.counts_files[i]
            shell("Rscript {input.script}" f" -i {input_file} -o {output_file} -a ../data/annotations/")