configfile: "./config.yaml"

# Reading stuff formt he config file.
qvalues = config['qvalues']
tmp_folder = config['tmp_folder']
clusters_folder = config['clusters_folder']
features = config["features"]
fantom5_peak_types = config["fantom5_peak_types"]
tss_radius = config["tss_radius"]

tss_name = f"tss_{tss_radius}bp"

def red(text):
    return "\033[1;31m" + text + "\033[0m"

rule all:
    input:
        #All the outputs form lift_and_filter.
        files = [
            tmp_folder + "/" + "foreground_enhancers.bed",
            tmp_folder + "/" + "active_enhancers.bed",
            tmp_folder + "/" + "full_enhancers.bed",
            ],
        # # The table
        # peak_table = tmp_folder + "/" + "types_counts.tsv",

# Converts the CLUS file to a BED file.
rule clus_to_bed:
    input:
        script = "../analysis/clus_io.py",
        clus = tmp_folder + "/" + "_qvalues.clus"
    output: 
        bed = temp(tmp_folder + "/" + "_qvalues.bed")
    shell:
        "python {input.script} clus2bed" f" {clusters_folder}" " {input.clus} {output.bed}"

# Converts a TSV file to a CLUS file.
rule tsv_to_clus:
    input:
        script = "../analysis/clus_io.py",
        qvalues = qvalues
    output: 
        clus = temp(tmp_folder + "/" + "_qvalues.clus")
    shell:
        "python {input.script} tsv2clus {input.qvalues} {output.clus}"


# This rule intersects the clusters ranges with the features (features active in the given cell line).
# And basically gets the reads in the foreground. (Both TSSs and Enhancers).
rule intersect_clusters:
    input:
        script = "../analysis/bed_utils.py",
        bed = tmp_folder + "/" + "_qvalues.bed",
        features = features
    output:
        inside = temp(tmp_folder + "/" + "_inside.bed"),

    shell:
        "python {input.script} intersect" " {input.features} {input.bed} {output.inside}"


# This rule creates the foreground.
rule get_foreground_enhancers:
    input:
        script = "../analysis/fantom5_utils.py",
        inside = tmp_folder + "/" + "_inside.bed",
    output:
        foreground_enhancers = temp(tmp_folder + "/" + "_foreground_enhancers.bed"),
    shell:
        "python {input.script} getRanges enhancer {input.inside}" f" {fantom5_peak_types}" " {output.foreground_enhancers}"

# This rule creates the background (the active peaks)
rule get_background_enhancers:
    input:
        script = "../analysis/fantom5_utils.py",
        features = features,
    output:
        active_enhancers = temp(tmp_folder + "/" + "_active_enhancers.bed"),
    shell:
        "python {input.script} getRanges enhancer {input.features}" f" {fantom5_peak_types} " " {output.active_enhancers}"


# This rule creates the full background (all fantom5 peaks)
rule get_full_background_enhancers:
    input:
        script = "../analysis/fantom5_utils.py",
        inside = tmp_folder + "/" + "_inside.bed",
    output:
        full_enhancers = temp(tmp_folder + "/" + "_full_enhancers.bed"),
    shell:
        "python {input.script} fullBackground enhancer" f" {fantom5_peak_types}" " {output.full_enhancers}"



rule lift_and_filter:
    input:
        # All the files.
        files = [
            tmp_folder + "/" + "_foreground_enhancers.bed",
            tmp_folder + "/" + "_active_enhancers.bed",
            tmp_folder + "/" + "_full_enhancers.bed",
            ],
        # The script to use.
        lift_over_script = "../analysis/lift_over.py",
        filter_script = "../analysis/bed_utils.py"
    output:
        files = [
            tmp_folder + "/" + "foreground_enhancers.bed",
            tmp_folder + "/" + "active_enhancers.bed",
            tmp_folder + "/" + "full_enhancers.bed",
            ],

    run:
        for i in range(len(input.files)):
            f = input.files[i]
            o = output.files[i]
            # filter
            shell("python {input.filter_script} keepAutosomal " f"{f}" f" {o}")

            # lift over
            shell("python {input.lift_over_script} " f" {f} hg19 hg38 {o}")

rule create_types_table:
    input:
        script = "../analysis/fantom5_utils.py",
        foreground_types = tmp_folder + "/" + "_inside.types",
        background_types = tmp_folder + "/" + "_background.types",
    output:
        peak_table = tmp_folder + "/" + "types_counts.tsv"
    
    shell:
        "python {input.script} typesTable " " {input.foreground_types} {input.background_types} {output.peak_table}"