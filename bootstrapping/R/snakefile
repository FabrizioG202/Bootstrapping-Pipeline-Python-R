# Adding the configuration file.
configfile: "../config.yaml"

# Color stuff.
def red(text):
    return("\033[91m{}\033[00m".format(text))

def green(text):
    return("\033[92m{}\033[00m".format(text))

def yellow(text):
    return("\033[93m{}\033[00m".format(text))

def blue(text):
    return("\033[94m{}\033[00m".format(text))

def italic(text):
    return("\033[3m{}\033[00m".format(text))

# the specification of the provided features
# Grabbing the features which are in a RDA format.
specs = glob_wildcards("../../data/features/{cell_line}/{feature_type}/{file_name}")

# Getting all the values from the wildcards
CELL_LINES = specs.cell_line
FEATURE_TYPES = specs.feature_type

# parse the data from the config file.
SELECTED_CELL_TYPES = config["cell_types"]
SELECTED_FEATURES = config["features"]
SELECTED_COMBINATIONS = config["combinations"]
FILE_NAMES = specs.file_name

# Reading the thing from the configuration file.
BOOTSTRAPS = config["bootstraps"]

# Parsing all the features
features = list(zip(CELL_LINES, FEATURE_TYPES, FILE_NAMES))

# filter the features
filtered_features = []
for feature in features:
    if SELECTED_CELL_TYPES:
        if feature[0] not in SELECTED_CELL_TYPES:
            continue
    if SELECTED_FEATURES:
        if feature[1] not in SELECTED_FEATURES:
            continue
    
    filtered_features.append(feature)

print("Running the workflow for the following features with {} bootstraps:".format(yellow(BOOTSTRAPS)))
# Print the features like this: 
# cell type (red) - feature type (yellow) (file name) (italic)
for feature in filtered_features:
    print("{} - {} ({})".format(red(feature[0]), yellow(feature[1]), italic(feature[2])))

# Wrap task is just the same list as the filtered_features one but with a fourth value for each which is the file extension.
# This is used to create the output file names.
WRAP_TASKS = []
for feature in filtered_features:
    WRAP_TASKS.append((feature[0], feature[1], ".".join(feature[2].split(".")[:-1]), feature[2].split(".")[-1]))

CLUS_CELL_LINES = list(set([f[0] for f in filtered_features]))

# Wraps the given features into a GenomicRange object to speed up further computations
rule wrap_features:
    input:
        #The script for wrapping the features
        script = "code/wrap_features.R",

        # The features to wrap in a GenomicRange object
        data = [
            f"../../data/features/{cell_line}/{feature_type}/{file_name}.{suffix}"
            for cell_line, feature_type, file_name, suffix in WRAP_TASKS
        ],

    benchmark:
        ".benchmarks/wrap_features.tsv"

    output:
        name = [
            (f"../../data/tmp/wrapped_features/{cell_line}/{feature_type}/{file_name}.Rda")
            for cell_line, feature_type, file_name, suffix in WRAP_TASKS
        ],
    run:
        print("Wrapping Features:")

        # Looping over the 
        for cell_line, feature_type, file_name, suffix in WRAP_TASKS:
            input_file = f"../../data/features/{cell_line}/{feature_type}/{file_name}.{suffix}"
            output_file = f"../../data/tmp/wrapped_features/{cell_line}/{feature_type}/{file_name}.Rda"

            print("- Cell Line ", yellow(cell_line), ", with ", green(feature_type), " features:", sep = "")
            shell("Rscript {input.script}" + f" --data {input_file} --output {output_file} --line {cell_line} --feature {feature_type} --extension {suffix.lower()}")

# Counts the number of features for each annotation category.
rule count_annotations:
    input: 
        script = "code/count_annotations.R",

        # The wrapped features to count the annotation one.
        data = [
            f"../../data/tmp/wrapped_features/{cell_line}/{feature_type}/{file_name}.Rda"
            for cell_line, feature_type, file_name, suffix in WRAP_TASKS
        ],
        annotation_data = "../../data/annotations/"

    output:         
        name =[
            (f"../../data/tmp/annotation_counts/{cell_line}/{feature_type}/counts.tsv")
            for cell_line, feature_type, file_name, suffix in WRAP_TASKS
        ],
    benchmark:
        ".benchmarks/count_annotations.tsv"
    params:
        # The seed for the random number generator.
        seed = 12345
    run:
    
        print("Counting Annotations:")
        for cell_line, feature_type, file_name, suffix in WRAP_TASKS:
            
            # The input file
            input_file = f"../../data/tmp/wrapped_features/{cell_line}/{feature_type}/{file_name}.Rda"

            # The output file
            output_file = f"../../data/tmp/annotation_counts/{cell_line}/{feature_type}/counts.tsv"

            # Logging:
            print("- Cell Line ", yellow(cell_line), ", with ", green(feature_type), " features:", sep = "")
            
            # Running the script
            shell("Rscript {input.script}" + f" --input {input_file} --output {output_file} --annotation {input.annotation_data} --seed {params.seed}")


# Wraps the raw cluster files into genomicranges objects.
rule wrap_clusters:
    input:
        #The script 
        script = "code/wrap_clusters.R",
        raw_folder = [f"../../data/rda_clusters/{cell_line}/" for cell_line in CLUS_CELL_LINES],
    output:
        out_folder =  [(directory(f"../../data/tmp/wrapped_clusters/{cell_line}/") for cell_line in CLUS_CELL_LINES)],
    params:
        # Whether to show progress.
        show_progress = True,
    
    benchmark:
        ".benchmarks/wrap_clusters.tsv"
    run:

        print("Wrapping Clusters:")
    
        for cell_line in CLUS_CELL_LINES:
            input_folder = f"../../data/rda_clusters/{cell_line}/"
            output_folder = f"../../data/tmp/wrapped_clusters/{cell_line}/"

            print("- Cell Line ", yellow(cell_line), ":", sep = "")
            shell("Rscript {input.script}" + f" --input {input_folder} --output {output_folder} --line {cell_line}" +( "--progress" if params.show_progress else ""))


rule compute_pvalue:
    input: 
        # The script
        script = "code/compute_pvalue.R",
        wrapped_clusters = [((f"../../data/tmp/wrapped_clusters/{cell_line}/") for cell_line in CLUS_CELL_LINES)],
        genome = "../../data/hg19.genome",
        wrapped_features = [
            f"../../data/tmp/wrapped_features/{cell_line}/{feature_type}/{file_name}.Rda"
            for cell_line, feature_type, file_name, suffix in WRAP_TASKS
        ],
        annotations = [
            f"../../data/tmp/annotation_counts/{cell_line}/{feature_type}/counts.tsv"
            for cell_line, feature_type, file_name, suffix in WRAP_TASKS
        ],
        function_path = "../../data/annotations/",
    params:
        seed = 12345,
        bootstraps = BOOTSTRAPS
    output:
        name =  [
            (f"../../results/enrichment/{cell_line}.{feature_type}.tsv")
            for cell_line, feature_type, file_name, suffix in WRAP_TASKS
        ],

    benchmark:
        ".benchmarks/compute_pvalue.tsv"

    run:
        print("Computing p-values:")
        for cell_line, feature_type, file_name, suffix in WRAP_TASKS:
            feature_input_file = f"../../data/tmp/wrapped_features/{cell_line}/{feature_type}/{file_name}.Rda"
            cluster_input_folder = f"../../data/tmp/wrapped_clusters/{cell_line}/"

            annotation_input_file = f"../../data/tmp/annotation_counts/{cell_line}/{feature_type}/counts.tsv"

            out_file = f"../../results/enrichment/{cell_line}.{feature_type}.tsv"

            print("- Cell Line ", yellow(cell_line), ", with ", green(feature_type), " features:", sep = "")
            shell("Rscript {input.script} --function_path {input.function_path} --genome {input.genome} --seed {params.seed} --bootstraps {params.bootstraps} --chromosomes chr22,chr21" + f" --annotations {annotation_input_file} --feature {feature_input_file} --clusters {cluster_input_folder}  --workers 3 --output {out_file}")