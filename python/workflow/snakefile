# Adding the configuration file.
configfile: "./workflow/config.yaml"

# import module common from path: "../../common"
import importlib.util
import sys, os
spec = importlib.util.spec_from_file_location("parsers", "../common/parsers.py")
parsers = importlib.util.module_from_spec(spec)
sys.modules["parsers"] = parsers
spec.loader.exec_module(parsers)

# The path for the filtering.
FILTER_PATH = "./workflow/filter.txt"

# Color stuff.
def red(text):
    return("\033[91m{}\033[00m".format(text))

def green(text):
    return("\033[92m{}\033[00m".format(text))

def yellow(text):
    return("\033[93m{}\033[00m".format(text))

def blue(text):
    return("\033[94m{}\033[00m".format(text))

# importing stuff
import os

# the specification of the provided features
# Grabbing the features which are in a RDA format.
specs = glob_wildcards("../data/features/{cell_line}/{feature_type}/{file_name}")

# Getting all the values from the wildcards
CELL_LINES = specs.cell_line
FEATURE_TYPES = specs.feature_type
FILE_NAMES = specs.file_name
features = list(zip(CELL_LINES, FEATURE_TYPES, FILE_NAMES))
before_ = len(features)
features = parsers.parse_filter_file(FILTER_PATH).filter(features)
print(f"{yellow('Filtered')} {before_} features to {len(features)} features. (total {yellow(-len(features) + before_)} removed)")
print(red(features))

# Reading the thing from the configuration file.
BOOTSTRAPS = config["bootstraps"]
print("Running Python Pipeline with {} bootstraps".format(yellow(BOOTSTRAPS)))

# Annotating the files.
rule annotate_features:
    input: 
        files = [f"../data/features/{cell_line}/{feature_type}/{file_name}" for cell_line, feature_type, file_name in features]
    output:
        files = [f"../data/counts/{cell_line}/{feature_type}/{file_name}.counts.tsv" for cell_line, feature_type, file_name in features]
    
    
    benchmark:
        "../benchmarks/annotate_features.benchmark.txt"
    
    run:
        print(blue(features))
        for cell_line, feature_type, file_name in features:
            print(f"Annotating {cell_line} {feature_type} {yellow(file_name)}")
            in_file = f"../data/features/{cell_line}/{feature_type}/{file_name}"
            out_file = f"../data/counts/{cell_line}/{feature_type}/{file_name}.counts.tsv"

            # Checking if it exists already (this is done because snakemake deletes the file for no reason if nothing has changed)
            if(os.path.exists(out_file)):
                print(f"{green(out_file)} already exists, skipping")
                continue

            # Generating it.
            shell(f"Rscript annotate.R -i {in_file} -o {out_file} -a ../data/annotations/")


# Computing the pvalues.
rule compute_pvalue:
    input:
        counts = [f"../data/counts/{cell_line}/{feature_type}/{file_name}.counts.tsv" for cell_line, feature_type, file_name in features],
    params:
        bootstraps = BOOTSTRAPS
    
    benchmark:
        "../benchmarks/compute_pvalue.benchmark.txt"
    
    output:
        directory("../results/")
    shell:
        "python main.py -n {params.bootstraps}"

